services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=${KAFKA_NODE_ID}
      - KAFKA_CFG_PROCESS_ROLES=${KAFKA_PROCESS_ROLES}
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_CONTROLLER_QUORUM_VOTERS}
      - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_CLUSTER_ID}
      - KAFKA_CFG_LISTENERS=${KAFKA_LISTENERS}
      - KAFKA_CFG_ADVERTISED_LISTENERS=${KAFKA_ADVERTISED_LISTENERS}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP}
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=${KAFKA_CONTROLLER_LISTENER_NAMES}
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=${KAFKA_INTER_BROKER_LISTENER_NAME}
    networks:
      - backend
    volumes:
      - kafka-data:/bitnami/kafka

  postgresql:
    image: bitnami/postgresql:latest
    container_name: postgresql
    restart: always
    environment:
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${AIRFLOW_DATABASE_NAME}
      - POSTGRESQL_POSTGRES_PASSWORD=${POSTGRESQL_POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks:
      - backend
    volumes:
      - postgres-data:/bitnami/postgresql

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "5050:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - backend
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "3000:3000"  # UI en http://localhost:3000
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    networks:
      - backend
    volumes:
      - grafana-storage:/var/lib/grafana


  # airflow:
  #   image: bitnami/airflow:latest
  #   container_name: airflow
  #   restart: on-failure
  #   ports:
  #     - "8080:8080"  # Airflow UI at http://localhost:8080

  #   environment:
  #     - AIRFLOW_EXECUTOR=${AIRFLOW_EXECUTOR}
  #     - AIRFLOW_DATABASE_NAME=${AIRFLOW_DATABASE_NAME}
  #     - AIRFLOW_DATABASE_USERNAME=${POSTGRESQL_USERNAME}
  #     - AIRFLOW_DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - AIRFLOW_USERNAME=${AIRFLOW_USERNAME}
  #     - AIRFLOW_PASSWORD=${AIRFLOW_PASSWORD}
  #   volumes:
  #     - ./services/airflow/dags:/opt/bitnami/airflow/dags
  #   networks:
  #     - backend
  #   depends_on:
  #     - init-db

  # airflow-scheduler:
  #   image: bitnami/airflow:latest
  #   container_name: airflow-scheduler
  #   environment:
  #     - AIRFLOW_COMPONENT_TYPE=scheduler
  #     - AIRFLOW_EXECUTOR=${AIRFLOW_EXECUTOR}
  #     - AIRFLOW_DATABASE_NAME=${AIRFLOW_DATABASE_NAME}
  #     - AIRFLOW_DATABASE_USERNAME=${POSTGRESQL_USERNAME}
  #     - AIRFLOW_DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - AIRFLOW_LOAD_EXAMPLES=no
  #     - AIRFLOW_WEBSERVER_HOST=${AIRFLOW_WEBSERVER_HOST}
  #   networks:
  #     - backend
  #   depends_on:
  #     - airflow
  #   volumes:
  #     - ./services/airflow/dags:/opt/bitnami/airflow/dags

  # airflow-trigger:
  #   image: bitnami/airflow:latest
  #   container_name: airflow-trigger
  #   environment:
  #     - AIRFLOW_COMPONENT_TYPE=triggerer
  #     - AIRFLOW_EXECUTOR=${AIRFLOW_EXECUTOR}
  #     - AIRFLOW_DATABASE_NAME=${AIRFLOW_DATABASE_NAME}
  #     - AIRFLOW_DATABASE_USERNAME=${POSTGRESQL_USERNAME}
  #     - AIRFLOW_DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - AIRFLOW_WEBSERVER_HOST=${AIRFLOW_WEBSERVER_HOST}
  #     - AIRFLOW_LOAD_EXAMPLES=no
  #   networks:
  #     - backend
  #   depends_on:
  #     - airflow
  #   volumes:
  #     - ./services/airflow/dags:/opt/bitnami/airflow/dags
  
  # airflow-dag-processor:
  #   image: bitnami/airflow:latest
  #   container_name: airflow-dag-processor
  #   environment:
  #     - AIRFLOW_COMPONENT_TYPE=dag-processor
  #     - AIRFLOW_EXECUTOR=${AIRFLOW_EXECUTOR}
  #     - AIRFLOW_DATABASE_NAME=${AIRFLOW_DATABASE_NAME}
  #     - AIRFLOW_DATABASE_USERNAME=${POSTGRESQL_USERNAME}
  #     - AIRFLOW_DATABASE_PASSWORD=${POSTGRESQL_PASSWORD}
  #     - AIRFLOW_WEBSERVER_HOST=${AIRFLOW_WEBSERVER_HOST}
  #     - AIRFLOW_LOAD_EXAMPLES=no
  #   networks:
  #     - backend
  #   depends_on:
  #     - airflow
  #   volumes:
  #     - ./services/airflow/dags:/opt/bitnami/airflow/dags
  
  # mlflow:
  #   image: bitnami/mlflow:latest 
  #   container_name: mlflow
  #   restart: unless-stopped
  #   ports:
  #     - "5000:5000" # MLflow UI at http://localhost:5000
  #   environment:
  #     - BACKEND_STORE_URI=${BACKEND_STORE_URI}
  #     - ARTIFACT_ROOT=${ARTIFACT_ROOT}
  #     - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
  #   volumes:
  #     - ./services/mlflow:/mlflow
  #   networks:
  #     - backend
  #   entrypoint: mlflow server --backend-store-uri postgresql+psycopg2://${POSTGRESQL_USERNAME}:${POSTGRESQL_PASSWORD}@${DATABASE_HOST}:5432/${MLFLOW_DATABASE_NAME} --default-artifact-root minio://${MLFLOW_S3_BUCKET}/ --artifacts-destination minio://${MLFLOW_S3_BUCKET}/ -h 0.0.0.0
  #   depends_on:
  #     - minio
  #     - init-db

  # minio:
  #   image: minio/minio:latest
  #   container_name: minio
  #   restart: unless-stopped
  #   ports:
  #     - "9000:9000" # MinIO UI at http://localhost:9000
  #     - "9001:9001"
  #   environment:
  #     - MINIO_ROOT_USER=${MINIO_ROOT_USER}
  #     - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
  #   volumes:
  #     - ./services/minio/data:/data
  #   command: server /data --console-address ":9001"
  #   networks:
  #     - backend

networks:
  backend:
    driver: bridge

volumes:
  kafka-data:
    driver: local
  postgres-data:
    driver: local
  pgadmin-data:
    driver: local
  grafana-storage:
    driver: local
  # mlflow-data:
  #   driver: local
  # minio-data:
  #   driver: local
